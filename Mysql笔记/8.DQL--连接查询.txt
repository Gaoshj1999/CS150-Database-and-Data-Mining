#进阶6：连接查询
/*
含义：又称多表差选，当查询的字段来自于多个表时，就会用到连接查询

笛卡尔乘积现象：表1 有m行,a列，表2 有n行，b列，结果=n*m行，a+b列
eg:
select name，boyname from beauty，boys；
假设select count(*) from beauty 输出12行
    select count(*) from boys 输出4行
最终结果：12*4=48行

发生原因：没有有效的连接条件
如何避免：添加有效的连接条件

分类：
	按年代分类：
	sq192标准：仅仅支持内连接
	sq100标准【推荐】：支持内连接+外连接(左外、右外)+交叉连接
	
		
	按功能分类：
		内连接：
			等值连接
			非等值连接
			自连接
		外连接：
			左外连接
			右外连接
			全外连接
			
		交叉连接
	
*/

#一、sq192标准
#1、等值连接
/*
1.多表等值连接的结果为多表的交集部分(想表述连接值一样)
2.n表连接，至少需要n-1个条件
3.多表连接的顺序没有要求
4.一般需要为表起别名
5.可以搭配前面介绍的所有子句使用，比如排序、分组、筛选

*/
#案例：查询员工名和对应得部门名
SELECT last_name,department_name
FROM employees,departments
WHERE employees.department_id=departments.department_id;

#2.为表起别名
/*
1.提高语句的简洁度
2.区分多个重名的字段(有重名的字段在select中一定要加前缀)

注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定
*/

#案例：查询员工名、工种号、工种名
SELECT e.last_name,e.job_id,j.job_title
FROM employees AS e,jobs j
WHERE e.`job_id`=j.`job_id`;

#3.两个表的顺序可以调换

#案例：查询员工名、工种号、工种名
SELECT e.last_name,e.job_id,j.job_title
FROM jobs j,employees e
WHERE e.`job_id`=j.`job_id`;

#4.可以加筛选

#案例1：查询有奖金的员工名、部门名
SELECT last_name,department_name
FROM employees e,departments d
WHERE e.`department_id`=d.`department_id` AND commission_pct IS NOT NULL;

#案例2：查询城市名中第二个字符为o的部门名和城市名
SELECT department_name,city
FROM departments d,locations l
WHERE d.`location_id`=l.`location_id` AND city LIKE '_o%';

#5.可以加分组

#案例1：查询每个城市的部门个数
SELECT COUNT(*),city
FROM departments d,locations l
WHERE d.`location_id`=l.`location_id`
GROUP BY city;

#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资
SELECT d.department_name,d.manager_id,MIN(salary)
FROM employees e,departments d
WHERE e.`department_id`=d.`department_id` AND commission_pct IS NOT NULL
GROUP BY d.department_name,d.manager_id;

#6.可以加排序

#案例：查询每个工种的工种名和员工个数，并且按员工个数降序
SELECT job_title,COUNT(*)
FROM employees e,jobs j
WHERE e.`job_id`=j.`job_id`
GROUP BY job_title
ORDER BY COUNT(*) DESC;

#7.可以是先三表连接

#案例：查询员工名、部门名和所在的城市
SELECT last_name,department_name,city
FROM employees e,departments d,locations l
WHERE e.`department_id`=d.`department_id` AND d.`location_id`=l.`location_id`;

#2、非等值连接

#案例1：查询员工的工资和工资级别
SELECT salary,grade_level
FROM employees e,job_grades jg
WHERE salary BETWEEN jg.`lowest_sal` AND jg.`highest_sal`;

#3、自连接

#案例：查询 员工名和上级的名称
SELECT e.employee_id,e.last_name,em.employee_id,em.last_name
FROM employees e,employees em
WHERE e.`manager_id`=em.`employee_id`;

#二、sq199语法
/*
语法：
	select 查询列表
	from 表1 别名 【连接类型】
	join 表2 别名
	on 连接条件
	【where 筛选条件】
	【group by 分组】
	【having 筛选条件】
	【order by 排序列表】

分类：	
内连接(⭐)：inner
外连接
	左外(⭐)：left 【outer】
	右外(⭐)：right 【outer】
	全外：full 【outer】
交叉连接：cross

*/

#1、内连接
/*
语法：

select 查询列表
from 表1 别名
inner join 表2 别名
on 连接条件

分类：
等值连接
非等值连接
自连接

特点：
1.添加排序、分组、筛选
2.inner 可以省略
3.筛选条件放在where后面，连接条件放在on后面。提高分离性，便于阅读
4.inner join连接和sq192语法中的等值连接效果是一样的，都是查询多表的交集

*/
#1.等值连接

#案例1：查询员工名、部门名
SELECT last_name,department_name
FROM  employees e
INNER JOIN departments d
ON e.`department_id`=d.`department_id`;

#案例2：查询名字中包含e的员工名和工种名(添加筛选)
SELECT last_name,job_title
FROM employees e
INNER JOIN jobs j
ON e.`job_id`=j.`job_id`
WHERE e.`last_name` LIKE '%e%';

#案例3：查询部门个数>3的城市名和部门个数(添加分组+筛选)
SELECT city,COUNT(*)
FROM departments d
INNER JOIN locations l
ON d.`location_id`=l.`location_id`
GROUP BY l.`city`
HAVING COUNT(*)>3;

#案例4：查询哪个部门的部门员工个数>3的部门名和员工个数，并按个数降序(添加排序)
SELECT department_name,COUNT(*)
FROM departments d
INNER JOIN employees e
ON d.`department_id`=e.`department_id`
GROUP BY d.`department_name`
HAVING COUNT(*)>3
ORDER BY COUNT(*) DESC;

#案例5：查询员工名、部门名、工种名，并按部门名降序(三表连接)
SELECT last_name,department_name,job_title
FROM employees e
INNER JOIN departments d ON e.`department_id`=d.`department_id`
INNER JOIN jobs j ON e.`job_id`=j.`job_id`
ORDER BY d.`department_name` DESC;

#2.非等值连接

#案例1：查询员工的工资级别
SELECT salary,grade_level
FROM employees e
JOIN job_grades j
ON e.`salary` BETWEEN j.`lowest_sal` AND j.`highest_sal`;

#案例2：查询工资级别个数>2的个数，并且按工资级别降序
SELECT grade_level,COUNT(*)
FROM employees e
JOIN job_grades j
ON e.`salary` BETWEEN j.`lowest_sal` AND j.`highest_sal`
GROUP BY grade_level
HAVING COUNT(*)>2
ORDER BY grade_level DESC;

#3.自连接

#案例1：查询员工的名字、上级的名字
SELECT e.last_name,m.last_name
FROM employees e
JOIN employees m
ON e.`employee_id`=m.`manager_id`;

#案例1：查询姓名中包含字符k的员工的名字、上级的名字
SELECT e.last_name,m.last_name
FROM employees e
JOIN employees m
ON e.`employee_id`=m.`manager_id`
WHERE e.`last_name` LIKE "%k%";

#二、外连接
/*
应用场景：用于查询一个表中有，另一个表中没有的记录

特点：
1、外连接的查询结果为主表中的所有就
	如果从表中有和它匹配的值，则显示匹配的值(有多个匹配的值就显示多行)
	如果从表中没有和它匹配的值，则显示null
	外连接查询结果=内连接结果+主表中有而从表没有的记录
2、左外连接，left join左边的是主表
   右外连接，right join右边的是主表
3、左外和右外交换两个表的顺序，可以是实现同样的效果
4、全外连接=内连接+表1中有但表2没有的+表2中有但表一中没有的
5、交叉连接：即实现了sq192标准的笛卡尔乘积

*/

#案例1：查询哪个部门没有员工
#左外
SELECT department_name
FROM departments d
LEFT OUTER JOIN employees e
ON d.`department_id`=e.`department_id`
WHERE e.`employee_id`IS NULL;

#右外
SELECT department_name
FROM employees e
RIGHT OUTER JOIN departments d
ON d.`department_id`=e.`department_id`
WHERE e.`employee_id`IS NULL;

#注：主键不能相同，也不能为null
#因此在查询没有的部分的时候使用主键进行查询最万无一失

#全外
SELECT e.*,d.*
FROM employees e
FULL OUTER JOIN departments d
ON e.`department_id`=d.department_id;#mysql不支持

#交叉连接
SELECT e.*,d.*
FROM employees e
CROSS JOIN departments d;

#sq192 和 sq199 pk

#功能：sq199支持的较多
#可读性：sq199实现连接条件和筛选条件的分离，可读性较高